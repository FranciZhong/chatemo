datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ValidStatus {
  VALID
  INVALID
}

enum MessageType {
  USER
  MODEL
}

enum AvailableType {
  PUBLIC
  PRIVATE
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken") @db.Text
  access_token      String?  @map("accessToken") @db.Text
  expires_at        Int?     @map("expireAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken") @db.Text
  session_state     String?  @map("sessionState")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  description   String?   @db.Text
  config        Json      @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts                 Account[]
  sessions                 Session[]
  sentFriendRequests       FriendRequest[]         @relation("SentFriendRequests")
  receivedFriendRequests   FriendRequest[]         @relation("ReceivedFriendRequests")
  friendships              Friendship[]            @relation("UserFriendships")
  friendshipsTo            Friendship[]            @relation("FriendFriendships")
  participantsTo           ConversationPartipant[]
  sentConversationMessages ConversationMessage[]   @relation("SentMessages")
  agents                   Agent[]
  ownedChannels            Channel[]
  joinedChannels           ChannelMembership[]
  sentChannelRequests      ChannelRequest[]        @relation("SentChannelRequests")
  receivedChannelRequests  ChannelRequest[]        @relation("ReceivedChannelRequests")
  sentChannelMessages      ChannelMessage[]        @relation("SentMessages")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model FriendRequest {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  senderId   String
  sender     User          @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiverId String
  receiver   User          @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  status     RequestStatus

  @@unique([receiverId, senderId])
}

model Friendship {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  user           User         @relation("UserFriendships", fields: [userId], references: [id])
  friendId       String
  friend         User         @relation("FriendFriendships", fields: [friendId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  valid          ValidStatus  @default(VALID)

  @@unique([userId, friendId])
  @@index([conversationId])
}

model ConversationPartipant {
  id             String       @id @default(cuid())
  valid          ValidStatus  @default(VALID)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@index([userId])
  @@index([conversationId])
}

enum ConversationType {
  DIRECT
}

model Conversation {
  id           String                  @id @default(cuid())
  valid        ValidStatus             @default(VALID)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  type         ConversationType
  participants ConversationPartipant[]
  messages     ConversationMessage[]
  friendships  Friendship[]
}

model ConversationMessage {
  id                String                @id @default(cuid())
  valid             ValidStatus           @default(VALID)
  loading           Boolean               @default(false)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  type              MessageType           @default(USER)
  senderId          String
  sender            User                  @relation("SentMessages", fields: [senderId], references: [id])
  conversationId    String
  conversation      Conversation          @relation(fields: [conversationId], references: [id])
  content           String                @db.Text
  image             String?
  replyTo           String?
  replyToMessage    ConversationMessage?  @relation("ReplyMessage", fields: [replyTo], references: [id])
  repliedByMessages ConversationMessage[] @relation("ReplyMessage")
  provider          String?
  model             String?
  agentId           String?
  agent             Agent?                @relation(fields: [agentId], references: id)

  @@index([conversationId])
}

model Agent {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  valid                ValidStatus           @default(VALID)
  name                 String
  description          String?
  image                String?
  config               Json                  @default("{}")
  userId               String
  user                 User                  @relation(fields: [userId], references: [id])
  prompts              AgentPrompt[]
  conversationMessages ConversationMessage[]
  ChannelMessage       ChannelMessage[]

  @@index([userId])
}

model AgentPrompt {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  content   String      @db.Text
  agentId   String
  agent     Agent       @relation(fields: [agentId], references: [id])
  valid     ValidStatus @default(VALID)

  @@index([agentId])
}

model Channel {
  id          String              @id @default(cuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  valid       ValidStatus         @default(VALID)
  type        AvailableType
  ownerId     String
  owner       User                @relation(fields: [ownerId], references: [id])
  name        String
  image       String?
  description String?
  memberships ChannelMembership[]
  requests    ChannelRequest[]
  messages    ChannelMessage[]
}

model ChannelMembership {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  valid     ValidStatus @default(VALID)
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  channelId String
  channel   Channel     @relation(fields: [channelId], references: [id])

  @@unique([channelId, userId])
  @@index([userId])
}

enum ChannelRequestType {
  INVITE
  JOIN
}

model ChannelRequest {
  id         String             @id @default(cuid())
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  type       ChannelRequestType
  status     RequestStatus
  senderId   String
  sender     User               @relation("SentChannelRequests", fields: [senderId], references: [id])
  receiverId String
  receiver   User               @relation("ReceivedChannelRequests", fields: [receiverId], references: [id])
  channelId  String
  channel    Channel            @relation(fields: [channelId], references: [id])

  @@index([receiverId])
  @@index([channelId])
}

model ChannelMessage {
  id                String           @id @default(cuid())
  valid             ValidStatus      @default(VALID)
  loading           Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  type              MessageType      @default(USER)
  senderId          String
  sender            User             @relation("SentMessages", fields: [senderId], references: [id])
  channelId         String
  channel           Channel          @relation(fields: [channelId], references: [id])
  content           String           @db.Text
  image             String?
  replyTo           String?
  replyToMessage    ChannelMessage?  @relation("ReplyMessage", fields: [replyTo], references: [id])
  repliedByMessages ChannelMessage[] @relation("ReplyMessage")
  provider          String?
  model             String?
  agentId           String?
  agent             Agent?           @relation(fields: [agentId], references: id)

  @@index([channelId, valid, createdAt])
}
