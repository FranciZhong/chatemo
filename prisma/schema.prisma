datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ValidStatus {
  VALID
  INVALID
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken") @db.Text
  access_token      String?  @map("accessToken") @db.Text
  expires_at        Int?     @map("expireAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken") @db.Text
  session_state     String?  @map("sessionState")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  description   String?   @db.Text
  config        Json      @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts               Account[]
  sessions               Session[]
  sentFriendRequests     FriendRequest[]         @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]         @relation("ReceivedFriendRequests")
  friendships            Friendship[]            @relation("UserFriendships")
  friendshipsTo          Friendship[]            @relation("FriendFriendships")
  conversations          ConversationPartipant[]
  sentMessages           Message[]               @relation("SendMessages")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model FriendRequest {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  senderId   String
  sender     User          @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiverId String
  receiver   User          @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  status     RequestStatus

  @@unique([senderId, receiverId])
}

model Friendship {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  user      User        @relation("UserFriendships", fields: [userId], references: [id])
  friendId  String
  friend    User        @relation("FriendFriendships", fields: [friendId], references: [id])
  status    ValidStatus

  @@unique([userId, friendId])
}

model ConversationPartipant {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

enum ConversationType {
  DIRECT
}

model Conversation {
  id           String                  @id @default(cuid())
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  type         ConversationType
  participants ConversationPartipant[]
  messages     Message[]
}

model Message {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  senderId          String
  sender            User          @relation("SendMessages", fields: [senderId], references: [id])
  conversationId    String?
  conversation      Conversation? @relation(fields: [conversationId], references: [id])
  content           String        @db.Text
  replyTo           String?
  replyToMessage    Message?      @relation("ReplyMessage", fields: [replyTo], references: [id])
  repliedByMessages Message[]     @relation("ReplyMessage")
}
